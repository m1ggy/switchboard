name: Deploy Web + API to VPS (pnpm + Caddy + PM2)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'

          # === BASIC SETUP ===
          export APP_DIR=~/apps/turbo-app
          export DOMAIN=${{ secrets.DOMAIN_NAME }}
          export API_DOMAIN=api.$DOMAIN
          export REPO_URL=https://github.com/${{ github.repository }}.git

          # === INSTALL NODE + PNPM ===
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          corepack enable
          corepack prepare pnpm@latest --activate

          # === INSTALL PM2 ===
          sudo npm install -g pm2

          # === INSTALL CADDY ===
          sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo tee /etc/apt/keyrings/caddy.asc
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
          sudo apt update
          sudo apt install -y caddy

          # === CLONE OR UPDATE PROJECT ===
          if [ ! -d "$APP_DIR" ]; then
            git clone $REPO_URL $APP_DIR
          else
            cd $APP_DIR && git pull origin main
          fi

          # === WRITE SECRET FILES ===
          echo "${{ secrets.ENV_FILE }}" > $APP_DIR/packages/api/.env
          echo '${{ secrets.FIREBASE_JSON }}' > $APP_DIR/packages/api/firebase.json
          echo "${{ secrets.WEB_ENV_FILE }}" > $APP_DIR/packages/web/.env

          # === INSTALL + BUILD ===
          cd $APP_DIR
          pnpm install
          export PATH=$(pnpm bin):$PATH

          cd $APP_DIR/packages/web
          pnpm build

          cd $APP_DIR/packages/api
          pnpm build

          # === DEPLOY API VIA PM2 ===
          pm2 delete api || true
          pm2 start dist/index.js --name api

          # === CADDY CONFIG ===
          sudo tee /etc/caddy/Caddyfile > /dev/null <<EOC
          $DOMAIN {
            root * $APP_DIR/packages/web/dist
            file_server
          }

          $API_DOMAIN {
            reverse_proxy localhost:3000
          }
          EOC

            sudo systemctl reload caddy
          EOF
