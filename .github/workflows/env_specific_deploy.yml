name: Deploy Web + API to VPS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select deployment environment'
        type: environment
        required: true
  push:
    branches:
      - main
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: >-
      ${{
        github.event_name == 'workflow_dispatch' && inputs.environment ||
        github.ref_name == 'main' && 'calliya-prod' ||
        github.ref_name == 'dev' && 'development'
      }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Environment
        run: |
          echo "GitHub Event: ${{ github.event_name }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Environment: ${{ inputs.environment || 'development (inferred)' }}"

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} <<'EOF'
          set -euo pipefail

          # --- Bring the usual login PATH into this non-login shell (safe no-ops if files don't exist)
          [ -f "$HOME/.profile" ] && . "$HOME/.profile"
          [ -f "$HOME/.bashrc" ] && . "$HOME/.bashrc"
          [ -f "$HOME/.nvm/nvm.sh" ] && . "$HOME/.nvm/nvm.sh" || true

          # --- Make pnpm shims resolvable even if no profile was sourced
          export PNPM_HOME="$HOME/.local/share/pnpm"
          export PATH="$PNPM_HOME:/usr/local/bin:/usr/bin:$PATH"

          # --- Resolve repo/branch/env
          REPO_URL="https://github.com/${{ github.repository }}.git"
          BRANCH_NAME="${{ github.ref_name }}"
          DEPLOY_ENV="${{ inputs.environment }}"

          # Fallback for push events (no workflow_dispatch inputs)
          if [ -z "${DEPLOY_ENV:-}" ]; then
            case "$BRANCH_NAME" in
              main) DEPLOY_ENV="calliya-prod" ;;
              dev)  DEPLOY_ENV="development" ;;
              *)    DEPLOY_ENV="development" ;;
            esac
          fi

          echo "üöÄ Starting deployment to environment: $DEPLOY_ENV"

          APP_DIR="$HOME/apps/$DEPLOY_ENV"
          WEB_ROOT='${{ secrets.WEB_ROOT }}'
          DOMAIN='${{ secrets.DOMAIN_NAME }}'
          API_DOMAIN='${{ secrets.API_DOMAIN }}'
          WEB_DOMAIN='${{ secrets.WEB_DOMAIN }}'

          echo "üì¶ App directory: $APP_DIR"
          echo "Github repository: $REPO_URL"
          echo "üåç Domain: $DOMAIN"
          echo "üõ†Ô∏è Preparing system dependencies..."
          echo "üìÅ Checking application directory..."

          # --- Ensure pnpm is actually callable in this session
          if ! command -v pnpm >/dev/null 2>&1; then
            if command -v corepack >/dev/null 2>&1; then
              echo "üîß Enabling Corepack and preparing pnpm‚Ä¶"
              corepack enable || true
              corepack prepare pnpm@9 --activate
            fi
          fi

          # Final check: bail early with a clear message if still missing
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "‚ùå pnpm not found in PATH for this session. Ensure Node/Corepack or pnpm is installed for user ${USER}, or add it to PATH."
            echo "   Tried PNPM_HOME=$PNPM_HOME and sourced common profiles."
            exit 1
          fi

          # --- Ensure pm2 exists (user-space install, no sudo)
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "üîß Installing pm2 to user prefix with pnpm‚Ä¶"
            pnpm add -g pm2
            hash -r
          fi
          # If the shim didn't register in PATH yet, use absolute
          PM2_BIN="$(command -v pm2 || true)"
          if [ -z "$PM2_BIN" ] && [ -x "$PNPM_HOME/pm2" ]; then
            PM2_BIN="$PNPM_HOME/pm2"
          fi
          if [ -z "$PM2_BIN" ]; then
            echo "‚ùå pm2 could not be found even after install."
            exit 1
          fi

          # === CLONE OR PULL PROJECT ===
          if [ ! -d "$APP_DIR/.git" ]; then
            echo "üì• Cloning repository (branch: $BRANCH_NAME)‚Ä¶"
            rm -rf "$APP_DIR"
            mkdir -p "$APP_DIR"
            git clone --branch "$BRANCH_NAME" "$REPO_URL" "$APP_DIR"
          else
            echo "üîÑ Pulling latest code from $BRANCH_NAME‚Ä¶"
            cd "$APP_DIR"
            git fetch origin "$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git pull origin "$BRANCH_NAME"
          fi

          echo "üîê Injecting environment files‚Ä¶"
          rm -f "$APP_DIR/packages/api/.env"
          echo '${{ secrets.API_ENV_FILE }}' > "$APP_DIR/packages/api/.env"

          rm -f "$APP_DIR/packages/web/.env"
          echo "${{ secrets.WEB_ENV_FILE }}" > "$APP_DIR/packages/web/.env"
          echo '${{ secrets.FIREBASE_JSON }}' > "$APP_DIR/packages/api/firebase.json"
          echo '${{ secrets.BUCKET_GC_JSON }}' > "$APP_DIR/packages/api/bucket.json"

          echo "üì¶ Installing dependencies‚Ä¶"
          cd "$APP_DIR"
          pnpm install --frozen-lockfile

          # === BUILD WEB ===
          echo "üõ†Ô∏è Building Web‚Ä¶"
          cd "$APP_DIR/packages/web"
          NODE_OPTIONS="--max-old-space-size=1024" pnpm run build

          if [ -f "dist/index.html" ]; then
            echo "‚úÖ Web build succeeded."
            sudo mkdir -p "$WEB_ROOT"
            sudo cp -r dist/* "$WEB_ROOT/"
            echo "üöö Deployed web files to $WEB_ROOT"
          else
            echo "‚ùå Web build failed ‚Äî dist/index.html not found."
          fi

          # === BUILD & RUN API ===
          echo "üõ†Ô∏è Building API‚Ä¶"
          cd "$APP_DIR/packages/api"
          NODE_OPTIONS="--max-old-space-size=1024" pnpm run build

          if [ -f "$APP_DIR/packages/api/dist/index.mjs" ]; then
            echo "üöÄ Starting API with PM2‚Ä¶"
            "$PM2_BIN" delete "api-$DEPLOY_ENV" || true
            "$PM2_BIN" start dist/index.mjs --name "api-$DEPLOY_ENV" --interpreter node
          else
            echo "‚ùå API build failed ‚Äî index.mjs not found."
          fi

          # === CADDY CONFIG ===
          echo "üßæ Configuring Caddy‚Ä¶"
          sudo tee /etc/caddy/Caddyfile > /dev/null <<EOC
          $DOMAIN {
            root * $WEB_ROOT
            file_server
            try_files {path} /index.html
          }

          $API_DOMAIN {
            reverse_proxy localhost:3000
          }
          EOC

          sudo systemctl reload caddy
          echo "‚úÖ Deployment complete!"
          EOF

              run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} <<EOF
                REPO_URL="https://github.com/${{ github.repository }}.git"
                DEPLOY_ENV="${{ inputs.environment }}"
                set -euo pipefail

                echo "üöÄ Starting deployment to environment: \$DEPLOY_ENV"

                # Make pnpm visible for THIS session
                export PNPM_HOME="$HOME/.local/share/pnpm"
                export PATH="$PNPM_HOME:$PATH"


                APP_DIR="\$HOME/apps/\$DEPLOY_ENV"
                WEB_ROOT='${{ secrets.WEB_ROOT }}'
                DOMAIN='${{ secrets.DOMAIN_NAME }}'
                API_DOMAIN='${{ secrets.API_DOMAIN }}'
                WEB_DOMAIN='${{ secrets.WEB_DOMAIN }}'

                echo "üì¶ App directory: \$APP_DIR"
                echo "Github repository: \$REPO_URL"
                echo "üåç Domain: \$DOMAIN"
                echo "üõ†Ô∏è Preparing system dependencies..."

                echo "üìÅ Checking application directory..."

                # === CLONE OR PULL PROJECT ===
                BRANCH_NAME="${{ github.ref_name }}"

                if [ ! -d "\$APP_DIR/.git" ]; then
                  echo "üì• Cloning repository (branch: \$BRANCH_NAME)..."
                  rm -rf "\$APP_DIR"
                  mkdir -p "\$APP_DIR"
                  git clone --branch \$BRANCH_NAME \$REPO_URL \$APP_DIR
                else
                  echo "üîÑ Pulling latest code from \$BRANCH_NAME..."
                  cd "\$APP_DIR"
                  git fetch origin \$BRANCH_NAME
                  git checkout \$BRANCH_NAME
                  git pull origin \$BRANCH_NAME
                fi

                echo "üîê Injecting environment files..."

                # Clean and write .env files
                rm -f "\$APP_DIR/packages/api/.env"
                echo '${{ secrets.API_ENV_FILE }}' > "\$APP_DIR/packages/api/.env"

                rm -f "\$APP_DIR/packages/web/.env"
                echo "${{ secrets.WEB_ENV_FILE }}" > "\$APP_DIR/packages/web/.env"
                echo '${{ secrets.FIREBASE_JSON }}' > "\$APP_DIR/packages/api/firebase.json"
                echo '${{ secrets.BUCKET_GC_JSON }}' > "\$APP_DIR/packages/api/bucket.json"

                echo "üì¶ Installing dependencies..."
                cd "\$APP_DIR"
                pnpm install --frozen-lockfile

                # === BUILD WEB ===
                echo "üõ†Ô∏è Building Web..."
                cd "\$APP_DIR/packages/web"
                NODE_OPTIONS="--max-old-space-size=1024" pnpm run build

                if [ -f "dist/index.html" ]; then
                  echo "‚úÖ Web build succeeded."
                  sudo mkdir -p "\$WEB_ROOT"
                  sudo cp -r dist/* "\$WEB_ROOT/"
                  echo "üöö Deployed web files to \$WEB_ROOT"
                else
                  echo "‚ùå Web build failed ‚Äî dist/index.html not found."
                fi

                # === BUILD & RUN API ===
                echo "üõ†Ô∏è Building API..."
                cd "\$APP_DIR/packages/api"
                NODE_OPTIONS="--max-old-space-size=1024" pnpm run build

                if [ -f "\$APP_DIR/packages/api/dist/index.mjs" ]; then
                  echo "üöÄ Starting API with PM2..."
                  pm2 delete api-\$DEPLOY_ENV || true
                  pm2 start dist/index.mjs --name api-\$DEPLOY_ENV --interpreter node
                else
                  echo "‚ùå API build failed ‚Äî index.mjs not found."
                fi

                # === CADDY CONFIG ===
                echo "üßæ Configuring Caddy..."
                sudo tee /etc/caddy/Caddyfile > /dev/null <<EOC
                \$DOMAIN {
                  root * \$WEB_ROOT
                  file_server
                  try_files {path} /index.html
                }

                \$API_DOMAIN {
                  reverse_proxy localhost:3000
                }
                EOC

                sudo systemctl reload caddy
                echo "‚úÖ Deployment complete!"
                EOF
