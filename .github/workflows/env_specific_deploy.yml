name: Deploy Web + API to VPS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select deployment environment'
        type: environment
        required: true

  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && 'development' || inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Debug Environment
        run: |
          echo "GitHub Event: ${{ github.event_name }}"
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Environment: ${{ inputs.environment || 'development (inferred)' }}"

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} <<EOF
          REPO_URL="https://github.com/${{ github.repository }}.git"
          DEPLOY_ENV="${{ inputs.environment }}"
          set -euo pipefail

          echo "🚀 Starting deployment to environment: \$DEPLOY_ENV"

          APP_DIR="\$HOME/apps/\$DEPLOY_ENV"
          WEB_ROOT='${{ secrets.WEB_ROOT }}'
          DOMAIN='${{ secrets.DOMAIN_NAME }}'
          API_DOMAIN='${{ secrets.API_DOMAIN }}'
          WEB_DOMAIN='${{ secrets.WEB_DOMAIN }}'

          echo "📦 App directory: \$APP_DIR"
          echo "Github repository: \$REPO_URL"
          echo "🌍 Domain: \$DOMAIN"
          echo "🛠️ Preparing system dependencies..."

          # === SETUP NODE/PNPM/PM2 ===
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          corepack enable
          corepack prepare pnpm@latest --activate
          sudo npm install -g pm2

          echo "🔐 Installing Caddy..."
          sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl gnupg
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --batch --yes --dearmor | sudo tee /usr/share/keyrings/caddy-stable-archive-keyring.gpg > /dev/null
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list > /dev/null
          sudo apt update
          sudo apt install caddy

          echo "📁 Checking application directory..."

          # === CLONE OR PULL PROJECT ===
          BRANCH_NAME="${{ github.ref_name }}"

          if [ ! -d "\$APP_DIR/.git" ]; then
            echo "📥 Cloning repository (branch: \$BRANCH_NAME)..."
            rm -rf "\$APP_DIR"
            mkdir -p "\$APP_DIR"
            git clone --branch \$BRANCH_NAME \$REPO_URL \$APP_DIR
          else
            echo "🔄 Pulling latest code from \$BRANCH_NAME..."
            cd "\$APP_DIR"
            git fetch origin \$BRANCH_NAME
            git checkout \$BRANCH_NAME
            git pull origin \$BRANCH_NAME
          fi

          echo "🔐 Injecting environment files..."

          # Clean and write .env files
          rm -f "\$APP_DIR/packages/api/.env"
          echo '${{ secrets.API_ENV_FILE }}' > "\$APP_DIR/packages/api/.env"

          rm -f "\$APP_DIR/packages/web/.env"
          echo "${{ secrets.WEB_ENV_FILE }}" > "\$APP_DIR/packages/web/.env"
          echo '${{ secrets.FIREBASE_JSON }}' > "\$APP_DIR/packages/api/firebase.json"

          echo "📦 Installing dependencies..."
          cd "\$APP_DIR"
          pnpm install --frozen-lockfile

          # === BUILD WEB ===
          echo "🛠️ Building Web..."
          cd "\$APP_DIR/packages/web"
          NODE_OPTIONS="--max-old-space-size=1024" pnpm run build

          if [ -f "dist/index.html" ]; then
            echo "✅ Web build succeeded."
            sudo mkdir -p "\$WEB_ROOT"
            sudo cp -r dist/* "\$WEB_ROOT/"
            echo "🚚 Deployed web files to \$WEB_ROOT"
          else
            echo "❌ Web build failed — dist/index.html not found."
          fi

          # === BUILD & RUN API ===
          echo "🛠️ Building API..."
          cd "\$APP_DIR/packages/api"
          NODE_OPTIONS="--max-old-space-size=1024" pnpm run build

          if [ -f "\$APP_DIR/packages/api/dist/index.mjs" ]; then
            echo "🚀 Starting API with PM2..."
            pm2 delete api-\$DEPLOY_ENV || true
            pm2 start dist/index.mjs --name api-\$DEPLOY_ENV --interpreter node
          else
            echo "❌ API build failed — index.mjs not found."
          fi

          # === CADDY CONFIG ===
          echo "🧾 Configuring Caddy..."
          sudo tee /etc/caddy/Caddyfile > /dev/null <<EOC
          \$DOMAIN {
            root * \$WEB_ROOT
            file_server
            try_files {path} /index.html
          }

          \$API_DOMAIN {
            reverse_proxy localhost:3000
          }
          EOC

          sudo systemctl reload caddy
          echo "✅ Deployment complete!"
          EOF
